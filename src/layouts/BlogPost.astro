---
import fs from 'fs';
import path from 'path';
import Layout from './Default.astro';
import BlogSideBar from '../components/blog/BlogSideBar.astro';
import BlogContent from '../components/blog/BlogContent.astro';
import RecentBlogPosts from '../components/generic/RecentBlogPosts.astro';

const ogImage = new URL(`/v1/generate/og/${Astro.params.slug}.svg`, Astro.url);

const { content } = Astro.props;
const { title, description, file } = content;

const extractHeadingsWithImages = (markdown: string) => {
  const headingRegex = /^(#{1,6})\s+(.*?)$/gm;  // Match markdown headers
  const imageRegex = /(?:!\[.*\]\((.*?)\)|<img\s+[^>]*src=["'](.*?)["'][^>]*>)/;  // Match both markdown and HTML img (only once)

  let headingsWithImages = [];
  let headingMatch;
  
  while ((headingMatch = headingRegex.exec(markdown)) !== null) {
    const [fullMatch, hashes, headingText] = headingMatch;
    const depth = hashes.length;
    const slug = headingText.toLowerCase().replace(/\s+/g, '-');

    // Slice the content immediately below the header (next line)
    const bodyBelowHeading = markdown.slice(headingMatch.index + fullMatch.length).trim();
    
    // Ensure that the next line (after trimming) is an image (using regex to match only the first image on the next line)
    const nextLine = bodyBelowHeading.split("\n")[0].trim();  // Get the first line after the heading

    const imageMatch = imageRegex.exec(nextLine); // Check if the first line after the heading is an image
    const imageUrl = imageMatch ? (imageMatch[1] || imageMatch[2]) : null;  // Capture the URL

    // Push the heading and its associated image URL (or null if no image exists)
    headingsWithImages.push({
      text: headingText,
      slug: slug,
      depth: depth,
      imageUrl: imageUrl,
    });
  }

  return headingsWithImages;
};

let markdownContent = '';
if (file) {
  markdownContent = fs.readFileSync(path.resolve(file), 'utf-8');
}

const headingsWithImages = extractHeadingsWithImages(markdownContent);
---

<Layout title={title} description={description} ogImage={ogImage}>
  <main class='p-6 lg:grid lg:grid-cols-5 flex justify-center'>
    <div class="overflow-visible h-screen">
      <BlogSideBar headings={headingsWithImages} />
    </div>
    <div class = 'col-span-3'>
      <a href='/blog/' title='Back to blog'>&larr; Back to blog</a>
      <p class='text-slate text-sm md:text-base'>
        Published on {content.pubDate} by {content.author}
      </p>
      <br>
      <header class="mb-6">
        <h1 class="text-5xl font-bold">{title}</h1>
        <p class="text-gray-600">{description}</p>
      </header>
      <BlogContent content={content}>
        <slot />
      </BlogContent>
    </div>
  </main>
  <section class='p-6'>
    <RecentBlogPosts count={6} />
  </section>
</Layout>
